plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDepManVersion}"
    id "org.openapi.generator" version "${openapiGeneratorVersion}"
    id 'jacoco'
}

group = 'com.foodorders'
version = '0.0.1'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    implementation 'org.flywaydb:flyway-core'
    testImplementation 'org.projectlombok:lombok:1.18.22'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    implementation "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiStarter}"

    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    implementation "javax.annotation:javax.annotation-api:${javaxAnnotationVersion}"
    implementation "io.swagger:swagger-annotations:${swaggerAnnotationsVersion}"
    implementation "com.google.code.findbugs:jsr305:${jrs305Version}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation "org.slf4j:slf4j-api:${wiremockSlf4jVersion}"
    testImplementation "com.github.tomakehurst:wiremock-standalone:${wiremockStandaloneVersion}"
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
}

tasks.named('test') {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "${jacocoVersion}"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtmlCustom')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
//                minimum = 0.5
            }
        }
    }
}

openApiGenerate {
    generatorName = "java"
    library = "webclient"
    configOptions = [
            serializableModel   : "true",
            dateLibrary         : "java8",
            serializationLibrary: "jackson"
    ]

    outputDir = "$buildDir/generated-sources/openapi".toString()
    inputSpec = "$rootDir/src/main/resources/contracts/spoonacular.json".toString()
    apiPackage = "com.dudis.foodorders.infrastructure.spoonacular.api"
    modelPackage = "com.dudis.foodorders.infrastructure.spoonacular.model"
}

sourceSets {
    main {
        java.srcDirs += "$buildDir/generated-sources/openapi/src/main/java"
    }
}

jar {
    enabled = false
}

compileJava.dependsOn tasks.openApiGenerate
compileJava.options.encoding = 'UTF-8'
